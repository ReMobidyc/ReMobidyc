module Memory
imports from AST all
exports all
definitions
types
     Address = nat1;

values
     ADDRESS_ERROR = <ADDRESS_ERROR>;
     TIME_ERROR = <TIME_ERROR>;

state Memory of
    vals : map Address to real
    next : map Address to real
    delta : map Address to real
    nextAvailableSlot : [Address]
    world : Address
    patchBase : [Address]
    animats : map Address to (AST`Identifier * nat1)
    newBorns : map Address to (AST`Identifier * nat1)
    deads : set of Address
    valuesStorage : seq of (map Address to real)
    animatsStorage : seq of (map Address to (AST`Identifier * nat1))
    ticks : nat
init s ==
    s
    = mk_Memory({|->}, {|->}, {|->}, nil, 1, nil, {|->}, {|->}, {}, [], [], 0)
end

operations
    reset : () ==> ()
    reset() ==
        (vals := {|->};
        next := {|->};
        delta := {|->};
        nextAvailableSlot := nil;
        world := 1;
        patchBase := nil;
        animats := {|->};
        newBorns := {|->};
        deads := {};
        valuesStorage := [];
        animatsStorage := [];
        ticks := 0);
    
    allocateWorld : nat1 ==> ()
    allocateWorld(size) == patchBase := world + size
    pre  patchBase = nil;
    
    allocatePatches : nat1 * nat1 ==> ()
    allocatePatches(num, size) ==
        nextAvailableSlot := patchBase + num  * size
    pre  patchBase <> nil and nextAvailableSlot = nil;
    
    allocateAnimat : AST`Identifier * nat1 ==> Address
    allocateAnimat(identifier, size) ==
        let address : Address = nextAvailableSlot
        in
            (nextAvailableSlot := nextAvailableSlot + size;
            newBorns(address) := mk_(identifier, size);
            return address)
    pre  nextAvailableSlot <> nil;
    
    deallocateAnimat : AST`Identifier * Address ==> ()
    deallocateAnimat(identifier, address) ==
        deads := deads union {address};
    
    pure getWorld : () ==> Address
    getWorld() == return world;
    
    pure getPatchBase : () ==> Address
    getPatchBase() == return patchBase;
    
    pure getAnimats : AST`Identifier ==> set of Address
    getAnimats(animatName) ==
        return {a | a in set dom animats
                & let mk_(n, -) = animats(a) in n = animatName};
    
    pure read : Address ==> real
    read(address) ==
        if address in set dom vals then return vals(address) else exit ADDRESS_ERROR;
    
    write : Address * real ==> ()
    write(address, data) == next(address) := data;
    
    writeDelta : Address * real ==> ()
    writeDelta(address, data) ==
        if
            address in set dom delta
        then
            delta(address) := delta(address) + data
        else
            exit ADDRESS_ERROR;
    
    pure getTime : () ==> nat
    getTime() == return ticks;
    
    setTime : nat1 ==> ()
    setTime(t) ==
        (if ticks = len valuesStorage then store();
        if t > len valuesStorage + 1 then exit TIME_ERROR;
        load(t));
    
    pure getLatestTime : () ==> nat
    getLatestTime() == return len valuesStorage;
    
    tick : () ==> ()
    tick() == setTime(getTime() + 1);
    
    store : () ==> ()
    store() ==
        (valuesStorage
            := valuesStorage
            ^ [{a |-> next(a) + (if a in set dom delta then delta(a) else 0)
            | a in set dom next \ deads}];
        animatsStorage
            := animatsStorage ^ [deads <-: animats munion newBorns])
    pre  ticks = len valuesStorage and ticks = len animatsStorage;
    
    load : nat1 ==> ()
    load(t) ==
        (vals := valuesStorage(t);
        animats := animatsStorage(t);
        next := vals;
        delta := {a |-> 0 | a in set dom vals};
        newBorns := {|->};
        deads := {};
        ticks := t)
    pre  t <= len valuesStorage and t <= len animatsStorage;

end Memory
