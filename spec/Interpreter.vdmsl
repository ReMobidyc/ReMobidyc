module Interpreter
imports
    from AST all,
    from Unit all,
    from Utilities functions pow: real * int -> real renamed pow;,
    from Random all,
    from MATH
        functions
            sqrt renamed sqrt;
            cos renamed cos;
            exp renamed exp;
            ln renamed ln;
exports functions eval : AST`Expression -> real;


		/*** distributions ***/
definitions
types
     Context :: random : Random`RandomGenerator;

functions
    eval : AST`Expression -> real
    eval(expr) ==
        cases expr:
            mk_AST`Literal(val, unit) -> Unit`toSI(unit, val),
            mk_AST`Addition(expr1, expr2) -> eval(expr1) + eval(expr2),
            mk_AST`Subtraction(expr1, expr2) -> eval(expr1) - eval(expr2),
            mk_AST`Product(expr1, expr2) -> eval(expr1)  * eval(expr2),
            mk_AST`Fraction(expr1, expr2) -> eval(expr1) / eval(expr2),
            mk_AST`Power(expr, order) -> pow(eval(expr), order),
            mk_AST`Minus(expr) -> -eval(expr),
            mk_AST`DeUnitCasting(unit, expr) -> Unit`fromSI(unit, eval(expr)),
            mk_AST`EnUnitCasting(expr, unit) -> Unit`toSI(unit, eval(expr))
            end;
    		
/*
     Expression =
        Variable| Apply| GuardedChoices|
        Placeholder;
     GuardedChoices :: seq1 of (Condition * Expression) Expression;
	-- atoms
     Variable =
        AttributeVariable| NewAttributeVariable| UtilityVariable;
     AttributeVariable :: agent : [Identifier] identifier : Identifier;
     NewAttributeVariable :: identifier : Identifier;
     UtilityVariable :: identifier : Identifier;

	-- composite
     Apply :: function : Identifier arguments : seq1 of Expression;
   -- randoms
     UniformDistribution ::
        beginSection : Expression endSection : Expression;
     NormalDistribution :: mean : Expression sigma : Expression;
     GammaDistribution :: shape : Expression scale : Expression;
     LogLogisticDistribution :: scale : Expression shape : Expression;
	-- directives
     Directive = AgentDirective| PatchDirective;
     AgentDirective ::
        <direction>| <distance>| <time>| <deltatime> agent : [Identifier];
     PatchDirective :: <gradient> Identifier;
*/

state Interpreter of
    context : Context
init s == s = mk_Interpreter(mk_Context(mk_Random`RandomGenerator(1)))
end

operations
    random : () ==> real
    random() ==
        (context .random := Random`next(context.random);
        return Random`value(context.random))
    post  RESULT >= 0 and RESULT <= 1;
    
    uniform : real * real ==> real
    uniform(sectionFrom, sectionTo) ==
        return let x = random() in x  * (sectionTo - sectionFrom) + sectionFrom;
    
    normal : real * real ==> real
    normal(mean, sigma) ==
        return let x1 = random(), x2 = random()
            in
                sqrt(ln(x1)  * -2.0)  * cos(x2  * 3.141592653589793  * 2.0)  * sigma
                + mean
    pre  sigma > 0;
    
    logLogistic : real * real ==> real
    logLogistic(scale, shape) ==
        let p : real = random()
        in return scale  * (p / (1 - p)) ** (1 / shape)
    pre  scale > 0 and shape > 0;
    
    gamma : real * real ==> real
    gamma(shape, scale) ==
        (if
            shape <= 1.0
        then
				-- Ahrens-Diester algorithm
            (let e = 2.718281828459045, c1 = e / (shape + e)
            in
                while true
                do
                    (dcl u1:real, u2:real;
                    u1 := random();
                    u2 := random();
                    if
                        u1 <= c1
                    then
                        (let x = (u1 / c1) ** (1 / shape)
                        in if u2 <= exp(-x) then return x  * scale)
                    else
                        (let x = -ln((1 - u1) / (c1  * shape))
                        in if u2 <= x ** (shape - 1.0) then return x  * scale)))
        else
				-- Marsaglia-Tsang algorithm
            (let c1 = shape - 1 / 3, c2 = 1 / sqrt(9  * c1)
            in
                while true
                do
                    (dcl z:real := normal(0, 1), v:real, u:real;
                    while c2  * z <= -1.0 do z := normal(0, 1);
                    v := let t = c2  * z + 1.0 in t  * t  * t;
                    u := random();
                    if u < 1.0 - 0.0331  * z  * z  * z  * z then return c1  * v  * scale;
                    if
                        ln(u) < 0.5  * z  * z + c1  * (1.0 - v + ln(v))
                    then
                        return c1  * v  * scale)))
    pre  scale > 0 and shape > 0;

end Interpreter
