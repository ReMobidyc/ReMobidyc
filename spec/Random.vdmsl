module Random
exports all
definitions
types
    RandomGenerator :: seed : nat1;
values
    factor : nat1 = 742938285;
    
    modulo : nat1 = 2147483647;
functions
    value : Random`RandomGenerator -> real
    value(mk_Random`RandomGenerator(seed)) ==
        (seed - 1) / (modulo - 1);
    
    next : Random`RandomGenerator -> Random`RandomGenerator
    next(mk_Random`RandomGenerator(seed)) ==
        mk_Random`RandomGenerator(seed  * factor mod modulo);
    
    hash : seq1 of nat1 -> nat1
    hash(seeds) ==
        let
            calcSeed : nat * seq of nat1 -> nat1
            calcSeed(x, ys) ==
                cases ys:
                    [z]^zs ->
                        calcSeed(bitXor(x  * factor, z  * factor) mod modulo, zs),
                    others -> x
                    end
        in calcSeed(0, seeds);
    
    bitXor : nat * nat -> nat
    bitXor(x, y) ==
        let x1 = x div 2, y1 = y div 2, z = (x + y) mod 2
        in
            (if x1 = 0
                    then y1  * 2 + z
                elseif y1 = 0
                    then x1  * 2 + z
                else
                    bitXor(x1, y1)  * 2 + z)
    measure m_bitXor;
    
    m_bitXor : nat * nat -> nat
    m_bitXor(x, -) == x;
end Random