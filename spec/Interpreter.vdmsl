module Interpreter
imports
    from AST all,
    from Unit all,
    from Memory all,
    from Random all,
    from MATH
        functions
            sqrt renamed sqrt;
            cos renamed cos;
            exp renamed exp;
            ln renamed ln;
exports operations eval : AST`Expression ==> real;


		/*** distributions ***/
definitions
types
     SimulationModel ::
        simulationDefinition : AST`SimulationDefinition
        animatDefinitions : AST`SimulationDefinition
        worldDefinition : AST`WorldDefinition
        patchDefinition : AST`PatchDefinition
        actionDefinitions : AST`ActionDefinition
        taskDefinitions : map AST`Identifier to AST`TaskDefinition;
     Context = ActionContext;
     ActionContext ::
        attributes : map [AST`Identifier] to (map AST`Identifier to Memory`Address)
        utilities : map AST`Identifier to (AST`Expression| real)
        action : AST`ActionDefinition
        random : Random`RandomGenerator;

values
     AGENT_NEW = "new";
     UNRESOLVED_REFERENCE = <UNRESOLVED_REFERENCE>;

operations
    eval : AST`Expression ==> real
    eval(expr) ==
        return cases expr:
                mk_AST`UtilityVariable(identifier) -> readUtility(identifier),
                mk_AST`AttributeVariable(agent, identifier) ->
                    readVariable(agent, identifier),
                mk_AST`Literal(val, unit) -> Unit`toSI(unit, val),
                mk_AST`Addition(expr1, expr2) -> eval(expr1) + eval(expr2),
                mk_AST`Subtraction(expr1, expr2) -> eval(expr1) - eval(expr2),
                mk_AST`Product(expr1, expr2) -> eval(expr1)  * eval(expr2),
                mk_AST`Fraction(expr1, expr2) -> eval(expr1) / eval(expr2),
                mk_AST`Power(expr, order) -> pow(eval(expr), order),
                mk_AST`Minus(expr) -> -eval(expr),
                mk_AST`DeUnitCasting(unit, expr) -> Unit`fromSI(unit, eval(expr)),
                mk_AST`EnUnitCasting(expr, unit) -> Unit`toSI(unit, eval(expr)),
                mk_AST`UniformDistribution(expr1, expr2) ->
                    uniform(eval(expr1), eval(expr2)),
                mk_AST`NormalDistribution(mean, sigma) ->
                    normal(eval(mean), eval(sigma)),
                mk_AST`GammaDistribution(shape, scale) ->
                    gamma(eval(shape), eval(scale)),
                mk_AST`LogLogisticDistribution(scale, shape) ->
                    logLogistic(eval(scale), eval(shape)),
                mk_AST`Apply(func, args) -> undefined,
                mk_AST`AgentDirective(directive, agent) -> undefined,
                mk_AST`PatchDirective(directive, agent) -> undefined,
                mk_AST`GuardedChoices(guardsAndExpressions, defaultExpression) ->
                    undefined,
                others -> undefined
                end;

state Interpreter of
    simulationModel : [token]
    context : [Context]
init s == s = mk_Interpreter(nil, nil)
end

operations
    readUtility : AST`Identifier ==> real
    readUtility(identifier) ==
        (dcl v:AST`Expression| real := context.utilities(identifier);
        if
            is_(v, AST`Expression)
        then
            (v := eval(v);
            context .utilities(identifier) := v);
        return v);
    
    readVariable : [AST`Identifier] * AST`Identifier ==> real
    readVariable(agent, identifier) ==
        return Memory`read(getAddress(agent, identifier));
    
    writeVariable : [AST`Identifier] * AST`Identifier * real ==> ()
    writeVariable(agent, identifier, data) ==
        Memory`write(getAddress(agent, identifier), data);
    
    writeDeltaVariable : [AST`Identifier] * AST`Identifier * real ==> ()
    writeDeltaVariable(agent, identifier, data) ==
        Memory`writeDelta(getAddress(agent, identifier), data);
    
    getAddress : [AST`Identifier] * AST`Identifier ==> Memory`Address
    getAddress(agent, identifier) ==
        if
            agent in set dom context.attributes
        then
            let attr = context.attributes(agent)
            in
                (if
                    identifier in set dom attr
                then
                    return attr(identifier)
                else
                    exit UNRESOLVED_REFERENCE)
        else
            exit UNRESOLVED_REFERENCE;
    
    random : () ==> real
    random() ==
        (context .random := Random`next(context.random);
        return Random`value(context.random))
    post  RESULT >= 0 and RESULT <= 1;
    
    uniform : real * real ==> real
    uniform(sectionFrom, sectionTo) ==
        return let x = random() in x  * (sectionTo - sectionFrom) + sectionFrom;
    
    normal : real * real ==> real
    normal(mean, sigma) ==
        return let x1 = random(), x2 = random()
            in
                sqrt(ln(x1)  * -2.0)  * cos(x2  * 3.141592653589793  * 2.0)  * sigma
                + mean
    pre  sigma > 0;
    
    logLogistic : real * real ==> real
    logLogistic(scale, shape) ==
        let p : real = random()
        in return scale  * (p / (1 - p)) ** (1 / shape)
    pre  scale > 0 and shape > 0;
    
    gamma : real * real ==> real
    gamma(shape, scale) ==
        (if
            shape <= 1.0
        then
				-- Ahrens-Diester algorithm
            (let e = 2.718281828459045, c1 = e / (shape + e)
            in
                while true
                do
                    (dcl u1:real, u2:real;
                    u1 := random();
                    u2 := random();
                    if
                        u1 <= c1
                    then
                        (let x = (u1 / c1) ** (1 / shape)
                        in if u2 <= exp(-x) then return x  * scale)
                    else
                        (let x = -ln((1 - u1) / (c1  * shape))
                        in if u2 <= x ** (shape - 1.0) then return x  * scale)))
        else
				-- Marsaglia-Tsang algorithm
            (let c1 = shape - 1 / 3, c2 = 1 / sqrt(9  * c1)
            in
                while true
                do
                    (dcl z:real := normal(0, 1), v:real, u:real;
                    while c2  * z <= -1.0 do z := normal(0, 1);
                    v := let t = c2  * z + 1.0 in t  * t  * t;
                    u := random();
                    if u < 1.0 - 0.0331  * z  * z  * z  * z then return c1  * v  * scale;
                    if
                        ln(u) < 0.5  * z  * z + c1  * (1.0 - v + ln(v))
                    then
                        return c1  * v  * scale)))
    pre  scale > 0 and shape > 0;

functions
    pow : real * int -> real
    pow(x, y) == if y >= 0 then x ** y else 1 / x ** (abs y);

end Interpreter
