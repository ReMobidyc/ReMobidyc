module ContextTest
imports
    from UnitTesting
        operations
            assertEquals renamed assertEquals;
            assertApproxEquals renamed assertApproxEquals;,
    from Context all,
    from Interpreter all,
    from AST all,
    from Unit all,
    from Random all
exports all
definitions
values
     exampleWorld : AST`WorldDefinition = mk_AST`WorldDefinition([]);
     examplePatch : AST`PatchDefinition = mk_AST`PatchDefinition([]);
     exampleAnimatA : AST`AnimatDefinition =
        mk_AST`AnimatDefinition(
            "AnimatA", "Stage1", [mk_AST`AttributeDeclaration("age", Unit`day)]);
     exampleActionAge : AST`ActionDefinition =
        mk_AST`ActionDefinition(
            "age",
            nil,
            nil,
            [],
            [],
            [mk_AST`UtilityDefinition("dt", mk_AST`Literal(1, Unit`s))]);
     exampleSimulationModel : AST`SimulationModel =
        mk_AST`SimulationModel(
            mk_AST`SimulationDefinition(
                mk_AST`SimulationTimeDefinition(mk_AST`Literal(10, Unit`s), mk_AST`Literal(1, Unit`s)),
                mk_AST`WorldInitializer([]),
                mk_AST`PatchInitializer(1, 1, mk_AST`Literal(1, Unit`m), []),
                [mk_AST`AnimatInitializer("AnimatA", 3, [])]),
            {"AnimatA" |-> exampleAnimatA},
            mk_AST`WorldDefinition([]),
            mk_AST`PatchDefinition([]),
            {"age" |-> exampleActionAge},
            []);

operations
    testReadUtility : () ==> ()
    testReadUtility() ==
        (Context`setUtilityDefinition("x", mk_AST`Literal(1, Unit`m));
        assertEquals(Context`readUtility("x"), nil, "no value is set yet");
        Context`writeUtility("x", 10);
        assertEquals(
            Context`readUtility("x"),
            10,
            "read a cached value of the utility variable"));
    
    testWriteUtility : () ==> ()
    testWriteUtility() ==
        (assertEquals(Context`readUtility("x"), nil, "no value is set yet");
        Context`writeUtility("x", 10);
        assertEquals(
            Context`readUtility("x"),
            10,
            "read a cached value of the utility variable"));
    
    testGetUtilityDefinition : () ==> ()
    testGetUtilityDefinition() ==
        (trap (Context`UNRESOLVED_REFERENCE) with skip
        in
            let d = Context`getUtilityDefinition("x")
            in exit "unresolvable because x is not defined yet";
        Context`setUtilityDefinition("x", mk_AST`Literal(1, Unit`m));
        assertEquals(
            Context`getUtilityDefinition("x"),
            mk_AST`Literal(1, Unit`m),
            "x is defined as x = 1[m]"));
    
    testSetUtilityDefinition : () ==> ()
    testSetUtilityDefinition() ==
        (Context`setUtilityDefinition("x", mk_AST`Literal(1, Unit`m));
        assertEquals(
            Context`getUtilityDefinition("x"),
            mk_AST`Literal(1, Unit`m),
            "x is defined as x = 1[m]");
        Context`setUtilityDefinition("x", mk_AST`Literal(2, Unit`m));
        assertEquals(
            Context`getUtilityDefinition("x"),
            mk_AST`Literal(2, Unit`m),
            "x is defined as x = 2[m]"));

end ContextTest
