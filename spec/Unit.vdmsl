module Unit
imports
    from AST
        types
            Unit renamed Unit;
            SIBaseUnit renamed SIBaseUnit;
exports all
definitions
values
     nodimension = mk_Unit`Unit([], 1);
     m = mk_Unit`Unit([mk_(<m>, 1)], 1);
     Mm = mk_Unit`Unit([mk_(<m>, 1)], 1000000);
     km = mk_Unit`Unit([mk_(<m>, 1)], 1000);
     cm = mk_Unit`Unit([mk_(<m>, 1)], 0.01);
     mm = mk_Unit`Unit([mk_(<m>, 1)], 0.001);
     μm = mk_Unit`Unit([mk_(<m>, 1)], 0.001 ** 2);
     nm = mk_Unit`Unit([mk_(<m>, 1)], 0.001 ** 3);
     pm = mk_Unit`Unit([mk_(<m>, 1)], 0.001 ** 4);
     mi = mk_Unit`Unit([mk_(<m>, 1)], 1609.344);
     yd = mk_Unit`Unit([mk_(<m>, 1)], 0.9144);
     ft = mk_Unit`Unit([mk_(<m>, 1)], 0.3048);
     inch = mk_Unit`Unit([mk_(<m>, 1)], 0.0254);
     kg = mk_Unit`Unit([mk_(<kg>, 1)], 1);
     t = mk_Unit`Unit([mk_(<kg>, 1)], 1000);
     g = mk_Unit`Unit([mk_(<kg>, 1)], 0.001);
     mg = mk_Unit`Unit([mk_(<kg>, 1)], 0.001 ** 2);
     μg = mk_Unit`Unit([mk_(<kg>, 1)], 0.001 ** 3);
     ng = mk_Unit`Unit([mk_(<kg>, 1)], 0.001 ** 4);
     pg = mk_Unit`Unit([mk_(<kg>, 1)], 0.001 ** 5);
     fg = mk_Unit`Unit([mk_(<kg>, 1)], 0.001 ** 6);
     lb = mk_Unit`Unit([mk_(<kg>, 1)], 0.45359237);
     oz = mk_Unit`Unit([mk_(<kg>, 1)], 0.028349523125);
     gr = mk_Unit`Unit([mk_(<kg>, 1)], 0.00006479891);
     s = mk_Unit`Unit([mk_(<s>, 1)], 1);
     year = mk_Unit`Unit([mk_(<s>, 1)], 31557600);
     month31 = mk_Unit`Unit([mk_(<s>, 1)], 2678400);
     month = mk_Unit`Unit([mk_(<s>, 1)], 2592000);
     week = mk_Unit`Unit([mk_(<s>, 1)], 604800);
     day = mk_Unit`Unit([mk_(<s>, 1)], 60  * 60  * 24);
     h = mk_Unit`Unit([mk_(<s>, 1)], 60  * 60);
     min = mk_Unit`Unit([mk_(<s>, 1)], 60);
     ms = mk_Unit`Unit([mk_(<s>, 1)], 0.001);
     μs = mk_Unit`Unit([mk_(<s>, 1)], 0.001 ** 2);
     K = mk_Unit`Unit([mk_(<K>, 1)], 1);
     ℃ = mk_Unit`Unit([mk_(<℃>, 1)], 1);
     ℉ = mk_Unit`Unit([mk_(<℉>, 1)], 1);
     rad = mk_Unit`Unit([mk_(<rad>, 1)], 1);
     degree = mk_Unit`Unit([mk_(<rad>, 1)], 0.017453292519943295);
     mol = mk_Unit`Unit([mk_(<mol>, 1)], 1);
     m2 = mk_Unit`Unit([mk_(<m>, 2)], 1);
     ha = mk_Unit`Unit([mk_(<m>, 2)], 10000);
     a = mk_Unit`Unit([mk_(<m>, 2)], 100);
     ac = mk_Unit`Unit([mk_(<m>, 2)], 4046.8564224);
     m3 = mk_Unit`Unit([mk_(<m>, 3)], 1);
     GL = mk_Unit`Unit([mk_(<m>, 3)], 1000000);
     ML = mk_Unit`Unit([mk_(<m>, 3)], 1000);
     kL = mk_Unit`Unit([mk_(<m>, 3)], 1);
     hL = mk_Unit`Unit([mk_(<m>, 3)], 0.1);
     daL = mk_Unit`Unit([mk_(<m>, 3)], 0.01);
     L = mk_Unit`Unit([mk_(<m>, 3)], 0.001);
     dL = mk_Unit`Unit([mk_(<m>, 3)], 0.000001);
     μL = mk_Unit`Unit([mk_(<m>, 3)], 0.000000001);
     N = mk_Unit`Unit([mk_(<kg>, 1), mk_(<m>, 1), mk_(<s>, -2)], 1);
     kgf = mk_Unit`Unit([mk_(<kg>, 1), mk_(<m>, 1), mk_(<s>, -2)], 9.8);
     dyn =
        mk_Unit`Unit([mk_(<kg>, 1), mk_(<m>, 1), mk_(<s>, -2)], 0.00001);
     lbf =
        mk_Unit`Unit([mk_(<kg>, 1), mk_(<m>, 1), mk_(<s>, -2)], 4.4482216152605);
     pdl =
        mk_Unit`Unit([mk_(<kg>, 1), mk_(<m>, 1), mk_(<s>, -2)], 0.13825495437);
     sn = mk_Unit`Unit([mk_(<kg>, 1), mk_(<m>, 1), mk_(<s>, -2)], 1000);
     Pa = mk_Unit`Unit([mk_(<kg>, 1), mk_(<m>, -1), mk_(<s>, -2)], 1);
     daPa =
        mk_Unit`Unit([mk_(<kg>, 1), mk_(<m>, -1), mk_(<s>, -2)], 10);
     hPa =
        mk_Unit`Unit([mk_(<kg>, 1), mk_(<m>, -1), mk_(<s>, -2)], 100);
     kPa =
        mk_Unit`Unit([mk_(<kg>, 1), mk_(<m>, -1), mk_(<s>, -2)], 1000);
     MPa =
        mk_Unit`Unit([mk_(<kg>, 1), mk_(<m>, -1), mk_(<s>, -2)], 1000000);
     GPa =
        mk_Unit`Unit([mk_(<kg>, 1), mk_(<m>, -1), mk_(<s>, -2)], 1000000000);
     dPa =
        mk_Unit`Unit([mk_(<kg>, 1), mk_(<m>, -1), mk_(<s>, -2)], 0.1);
     cPa =
        mk_Unit`Unit([mk_(<kg>, 1), mk_(<m>, -1), mk_(<s>, -2)], 0.01);
     mPa =
        mk_Unit`Unit([mk_(<kg>, 1), mk_(<m>, -1), mk_(<s>, -2)], 0.001);
     μPa =
        mk_Unit`Unit([mk_(<kg>, 1), mk_(<m>, -1), mk_(<s>, -2)], 0.000001);
     at =
        mk_Unit`Unit([mk_(<kg>, 1), mk_(<m>, -1), mk_(<s>, -2)], 98066.5);
     psi =
        mk_Unit`Unit([mk_(<kg>, 1), mk_(<m>, -1), mk_(<s>, -2)], 6894.757);
	-- energy
     Torr =
        mk_Unit`Unit([mk_(<kg>, 1), mk_(<m>, -1), mk_(<s>, -2)], 133.322);
     atm =
        mk_Unit`Unit([mk_(<kg>, 1), mk_(<m>, -1), mk_(<s>, -2)], 101325);
     bar =
        mk_Unit`Unit([mk_(<kg>, 1), mk_(<m>, -1), mk_(<s>, -2)], 100000);
	-- power
     J = mk_Unit`Unit([mk_(<kg>, 1), mk_(<m>, 2), mk_(<s>, -2)], 1);
     cal =
        mk_Unit`Unit([mk_(<kg>, 1), mk_(<m>, 2), mk_(<s>, -2)], 4.184);
     kcal =
        mk_Unit`Unit([mk_(<kg>, 1), mk_(<m>, 2), mk_(<s>, -2)], 4184);
     W = mk_Unit`Unit([mk_(<kg>, 1), mk_(<m>, 2), mk_(<s>, -3)], 1);
     kW = mk_Unit`Unit([mk_(<kg>, 1), mk_(<m>, 2), mk_(<s>, -3)], 1000);
     MW =
        mk_Unit`Unit([mk_(<kg>, 1), mk_(<m>, 2), mk_(<s>, -3)], 1000000);
     GW =
        mk_Unit`Unit([mk_(<kg>, 1), mk_(<m>, 2), mk_(<s>, -3)], 1000000000);
     mW =
        mk_Unit`Unit([mk_(<kg>, 1), mk_(<m>, 2), mk_(<s>, -3)], 0.001);
     μW =
        mk_Unit`Unit([mk_(<kg>, 1), mk_(<m>, 2), mk_(<s>, -3)], 0.000001);
     nW =
        mk_Unit`Unit([mk_(<kg>, 1), mk_(<m>, 2), mk_(<s>, -3)], 0.000000001);
	-- probability
     pW =
        mk_Unit`Unit([mk_(<kg>, 1), mk_(<m>, 2), mk_(<s>, -3)], 0.000000000001);
     PS =
        mk_Unit`Unit([mk_(<kg>, 1), mk_(<m>, 2), mk_(<s>, -3)], 735.5);
     HP = mk_Unit`Unit([mk_(<kg>, 1), mk_(<m>, 2), mk_(<s>, -3)], 745);
     percent = mk_Unit`Unit([], 0.01);
     mph = fraction(mi, h);
     kph = fraction(km, h);

functions
    toSI : Unit * real -> real
    toSI(mk_Unit`Unit(-, scale), value) == value  * scale;
    
    fromSI : Unit * real -> real
    fromSI(mk_Unit`Unit(-, scale), value) == value / scale;
    
    pow : Unit * int -> Unit
    pow(mk_Unit`Unit(bases, scale), order) ==
        let
            mulOrder : seq of (SIBaseUnit * int) * int -> seq of (SIBaseUnit * int)
            mulOrder(baseAndOrders, o1) ==
                cases baseAndOrders:
                    [] -> [],
                    [mk_(b, o2)]^rest -> [mk_(b, o1  * o2)] ^ mulOrder(rest, o1)
                    end,
            fpow : real * int -> real
            fpow(x, y) == if y >= 0 then x ** y else 1 / x ** (abs y)
        in mk_Unit`Unit(mulOrder(bases, order), fpow(scale, order));
    
    mul : Unit * Unit -> Unit
    mul(mk_Unit`Unit(bases1, scale1), mk_Unit`Unit(bases2, scale2)) ==
        let
            addBases : seq of (SIBaseUnit * int) * SIBaseUnit * int -> seq of (SIBaseUnit * int)
            addBases(bases1, base2, order2) ==
                cases bases1:
                    [] -> [mk_(base2, order2)],
                    [mk_(b1, o1)]^rest1 ->
                        if
                            b1 = base2
                        then
                            [mk_(b1, o1 + order2)] ^ rest1
                        else
                            [mk_(b1, o1)] ^ addBases(rest1, base2, order2)
                    end,
            mergeBases : seq of (SIBaseUnit * int) * seq of (SIBaseUnit * int) -> seq of (SIBaseUnit * int)
            mergeBases(bases1, bases2) ==
                cases bases2:
                    [] -> bases1,
                    [mk_(b2, o2)]^rest2 -> mergeBases(addBases(bases1, b2, o2), rest2)
                    end
        in mk_Unit`Unit(mergeBases(bases1, bases2), scale1  * scale2);
    
    fraction : Unit * Unit -> Unit
    fraction(unit1, unit2) == mul(unit1, pow(unit2, -1));

end Unit
