module AST
exports all
definitions
types
	/*** simulation definitions **/
     SimulationDefinition ::
        timeDefinition : SimulationTimeDefinition
        worldInitializer : WorldInitializer
        patchInitializer : PatchInitializer
        animatInitializers : seq of AnimatInitializer;

	/*** agent definitions **/
     SimulationTimeDefinition :: timeDuration : Literal timeStep : Literal;
     AnimatDefinition ::
        identifier : AgentIdentifier
        species : AgentIdentifier
        attributeDeclarations : seq of AttributeDeclaration;
     PatchDefinition ::
        attributeDeclarations : seq of AttributeDeclaration;
	  --
     WorldDefinition ::
        attributeDeclarations : seq of AttributeDeclaration;

	/*** action definitions ***/
     AttributeDeclaration :: identifier : Identifier unit : Unit;

	/*** task definitions ***/
     ActionDefinition ::
        identifier : Identifier
        object : [AgentIdentifier]
        guard : [Expression]
        lifeDirectives : seq of LifeDirective
        attributeDefinitions : seq of AttributeDefinition
        utilityDefinitions : seq of UtilityDefinition;
     TaskDefinition ::
        subjectIdentifier : AgentIdentifier
        verbIdentifier : Identifier
        objectIdentifier : [AgentIdentifier]
        nearest : bool
        range : Expression
        actionIdentifier : Identifier
        replacements : seq of Replacement;
	--
     Replacement ::
        placeholder : Placeholder| DirectivePlaceholder
        replacement : Expression| Condition| NewDirective| StageDirective;
     LifeDirective =
        DieDirective| KillDirective| NewDirective| StageDirective|
        DirectivePlaceholder;
     DieDirective = <die>;
     KillDirective = <kill>;
     NewDirective :: stage : AgentIdentifier quantity : nat1;
     StageDirective :: stage : AgentIdentifier;
     DirectivePlaceholder =
        NewDirectivePlaceholder| StageDirectivePlaceholder;
     NewDirectivePlaceholder = <new>;
     StageDirectivePlaceholder = <stage>;
     AttributeDefinition ::
        variable : AssignableVariable expression : Expression;
     UtilityDefinition ::
        variable : AssignableVariable expression : Expression;
     AssignableVariable =
        AssignableAttributeVariable| AssignableDeltaAttributeVariable|
        AssignableDifferentialAttributeVariable;
     AssignableAttributeVariable ::
        attributeVariable : AttributeVariable| Placeholder;
     AssignableDeltaAttributeVariable ::
        attributeVariable : AttributeVariable;
	/*** task definitions ***/
     AssignableDifferentialAttributeVariable ::
        attributeVariable : AttributeVariable;
     AttributeBind ::
        placeholder : Placeholder| DirectivePlaceholder
        replacement : Expression;

	/*** simulation definition ***/
     Placeholder :: identifier : Identifier;
     AnimatInitializer ::
        animat : AgentIdentifier
        population : nat1
        attributeInitializers : seq of AttributeInitializer;
     PatchInitializer ::
        xDivisions : nat1
        yDivisions : nat1
        size : Literal
        attributeInitializers : seq of AttributeInitializer;
	--
     WorldInitializer ::
        attributeInitializers : seq of AttributeInitializer;

	/*** Expressions ***/
     AttributeInitializer ::
        identifier : Identifier expression : Expression;
     Expression =
        Variable| Literal| Casting| Apply| Arithmetics| Distribution|
        GuardedChoices| Directive| Placeholder;
	-- atoms
     GuardedChoices :: seq1 of (Condition * Expression) Expression;
     Variable =
        AttributeVariable| NewAttributeVariable| UtilityVariable;
     AttributeVariable :: agent : [Identifier] identifier : Identifier;
     NewAttributeVariable :: identifier : Identifier;
     UtilityVariable :: identifier : Identifier;

	-- composite
     Literal :: real Unit;
     Apply :: function : Identifier arguments : seq1 of Expression;
     Arithmetics =
        Addition| Subtraction| Product| Fraction| Power| Minus;
     Addition :: Expression Expression;
     Subtraction :: Expression Expression;
     Product :: Expression Expression;
     Fraction :: Expression Expression;
     Power :: Expression int;
   -- randoms
     Minus :: Expression;
     Distribution =
        UniformDistribution| UniformDistributionX| UniformDistributionY|
        NormalDistribution| GammaDistribution| LogLogisticDistribution;
     UniformDistribution ::
        beginSection : Expression endSection : Expression;
     UniformDistributionX = <uniform_distribution_x>;
     UniformDistributionY = <uniform_distribution_y>;
     NormalDistribution :: mean : Expression sigma : Expression;
     GammaDistribution :: shape : Expression scale : Expression;
	-- directives
     LogLogisticDistribution :: scale : Expression shape : Expression;
     Directive = AgentDirective| PatchDirective;
     AgentDirective ::
        <direction>| <distance>| <time>| <delta_time> agent : [Identifier];
	-- type casting
     PatchDirective :: <direction_of_gradient> Identifier;
     Casting = DeUnitCasting| EnUnitCasting;
     DeUnitCasting :: Unit Expression;
     EnUnitCasting :: Expression Unit;
     Unit :: seq of (SIBaseUnit * int) scale : real
        inv mk_Unit(us, -) ==
            card {u | mk_(u, -) in seq us} = len us
            and (forall mk_(-, o) in set elems us & o <> 0);
	
	-- condition
     SIBaseUnit = <kg>| <m>| <s>| <℃>| <K>| <℉>| <rad>| <mol>;
     Condition =
        Equality| GreaterOrEqual| GreaterThan| LessOrEqual| LessThan|
        NotEqual| Negation| Conjunction| Disjunction| Placeholder;
     Equality :: Expression Expression;
     GreaterOrEqual :: Expression Expression;
     GreaterThan :: Expression Expression;
     LessOrEqual :: Expression Expression;
     LessThan :: Expression Expression;
     NotEqual :: Expression Expression;
     Negation :: Condition;
     Conjunction :: Condition Condition;
	-- lexicals
     Disjunction :: Condition Condition;
     Identifier = seq of char;
     AgentIdentifier = seq of char;

end AST
