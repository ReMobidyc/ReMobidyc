module Evaluation
imports
    from Interpreter all,
    from AST all,
    from Unit all,
    from Memory all,
    from Random all,
    from MATH
        functions
            sqrt renamed sqrt;
            sin renamed sin;
            cos renamed cos;
            exp renamed exp;
            ln renamed ln;
            atan renamed atan;
exports all
definitions
values
     NUM_ARGS_ERROR = <NUM_ARGS_ERROR>;

operations
    evalWorldInitializer : AST`WorldInitializer ==> ()
    evalWorldInitializer(worldInitializer) ==
        let worldDefinition = Interpreter`getWorldDefinition()
        in
            (Memory`allocateWorld(AST`sizeOfAgent(worldDefinition));
            let world = Memory`getWorld()
            in
                (Interpreter`setupInitializationContext(world, worldDefinition);
                Interpreter`loadUtilityDefinitions(worldDefinition.utilityDefinitions);
                for attributeDeclaration in worldDefinition.attributeDeclarations
                do evalAttributeDeclaration(attributeDeclaration);
                Interpreter`loadUtilityDefinitions(worldInitializer.utilityDefinitions);
                for attributeInitializer in worldInitializer.attributeInitializers
                do evalAttributeInitializer(attributeInitializer)));
    
    evalPatchInitializer : AST`PatchInitializer ==> ()
    evalPatchInitializer(patchInitializer) ==
        let
            patchDefinition = Interpreter`getPatchDefinition(),
            xDivisions = patchInitializer.xDivisions,
            yDivisions = patchInitializer.yDivisions
        in
            (Memory`allocatePatches(xDivisions, yDivisions, AST`sizeOfAgent(patchDefinition));
            for x = 0 to  xDivisions - 1
            do
                for y = 0 to  yDivisions - 1
                do
                    let patch = Memory`getPatch(x, y)
                    in
                        (Interpreter`setupInitializationContext(patch, patchDefinition);
                        Interpreter`loadUtilityDefinitions(patchDefinition.utilityDefinitions);
                        for attributeDeclaration in patchDefinition.attributeDeclarations
                        do evalAttributeDeclaration(attributeDeclaration);
                        Interpreter`loadUtilityDefinitions(patchInitializer.utilityDefinitions);
                        for attributeInitializer in patchInitializer.attributeInitializers
                        do evalAttributeInitializer(attributeInitializer)));
    
    evalAnimatInitializer : AST`AnimatInitializer ==> ()
    evalAnimatInitializer(animatInitializer) ==
        let
            animatName = animatInitializer.animat,
            animatDefinition = Interpreter`getAnimatDefinition(animatName)
        in
            for i = 1 to  animatInitializer.population
            do
                let
                    animat =
                        Memory`allocateAnimat(
                            animatName, AST`sizeOfAgent(animatDefinition))
                in
                    (Interpreter`setupInitializationContext(animat, animatDefinition);
                    writeVariable(
                        nil, "x", uniform(Interpreter`worldWest(), Interpreter`worldEast()));
                    writeVariable(
                        nil, "y", uniform(Interpreter`worldSouth(), Interpreter`worldNorth()));
                    Interpreter`loadUtilityDefinitions(animatDefinition.utilityDefinitions);
                    for attributeDeclaration in animatDefinition.attributeDeclarations
                    do evalAttributeDeclaration(attributeDeclaration);
                    Interpreter`loadUtilityDefinitions(animatInitializer.utilityDefinitions);
                    for attributeInitializer
                    in animatInitializer.attributeInitializers
                    do evalAttributeInitializer(attributeInitializer));
    
    evalAttributeInitializer : AST`AttributeInitializer ==> ()
    evalAttributeInitializer(attributeInitializer) ==
        writeVariable(
            nil,
            attributeInitializer.identifier,
            evalExpression(attributeInitializer.expression));
    
    evalAttributeDeclaration : AST`AttributeDeclaration ==> ()
    evalAttributeDeclaration(attributeDeclaration) ==
        if
            attributeDeclaration.initializerExpression <> nil
        then
            writeVariable(
                nil,
                attributeDeclaration.identifier,
                evalExpression(attributeDeclaration.initializerExpression));
    
    evalActionDefinition : AST`ActionDefinition ==> ()
    evalActionDefinition(actionDefinition) ==
        for attributeDefinition in actionDefinition.attributeDefinitions
        do evalAttributeDefinition(attributeDefinition);
    
    evalAttributeDefinition : AST`AttributeDefinition ==> ()
    evalAttributeDefinition(attributeDefinition) ==
        let value = evalExpression(attributeDefinition.expression)
        in
            cases attributeDefinition.variable:
                mk_AST`AssignableAttributeVariable(
                    mk_AST`AttributeVariable(agent, variable)) ->
                    writeVariable(agent, variable, value),
                mk_AST`AssignableDeltaAttributeVariable(
                    mk_AST`AttributeVariable(agent, variable)) ->
                    writeDeltaVariable(agent, variable, value),
                mk_AST`AssignableDifferentialAttributeVariable(
                    mk_AST`AttributeVariable(agent, variable)) ->
                    writeDeltaVariable(agent, variable, value  * deltaTime()),
                others -> exit Interpreter`UNRESOLVED_REFERENCE
                end;
    
    evalExpression : AST`Expression ==> real
    evalExpression(expr) ==
        return cases expr:
                mk_AST`UtilityVariable(identifier) ->
                    let val = Interpreter`readUtility(identifier)
                    in
                        (if
                                val <> nil
                            then
                                val
                            else
                                evalExpression(Interpreter`getUtilityDefinition(identifier))),
                mk_AST`AttributeVariable(agent, identifier) ->
                    Memory`read(Interpreter`getAttributeAddress(agent, identifier)),
                mk_AST`Literal(val, unit) -> Unit`toSI(unit, val),
                mk_AST`Addition(expr1, expr2) ->
                    evalExpression(expr1) + evalExpression(expr2),
                mk_AST`Subtraction(expr1, expr2) ->
                    evalExpression(expr1) - evalExpression(expr2),
                mk_AST`Product(expr1, expr2) ->
                    evalExpression(expr1)  * evalExpression(expr2),
                mk_AST`Fraction(expr1, expr2) ->
                    evalExpression(expr1) / evalExpression(expr2),
                mk_AST`Power(expr, order) -> pow(evalExpression(expr), order),
                mk_AST`Minus(expr) -> -evalExpression(expr),
                mk_AST`DeUnitCasting(unit, expr) ->
                    Unit`fromSI(unit, evalExpression(expr)),
                mk_AST`EnUnitCasting(expr, unit) ->
                    Unit`toSI(unit, evalExpression(expr)),
                mk_AST`UniformDistribution(expr1, expr2) ->
                    uniform(evalExpression(expr1), evalExpression(expr2)),
                mk_AST`NormalDistribution(mean, sigma) ->
                    normal(evalExpression(mean), evalExpression(sigma)),
                mk_AST`GammaDistribution(shape, scale) ->
                    gamma(evalExpression(shape), evalExpression(scale)),
                mk_AST`LogLogisticDistribution(scale, shape) ->
                    logLogistic(evalExpression(scale), evalExpression(shape)),
                mk_AST`Apply(func, args) ->
                    apply(func, [evalExpression(x) | x in seq args]),
                mk_AST`AgentDirective(directive, agent) ->
                    cases directive:
                        <direction> -> directionOfAgent(agent),
                        <distance> -> distanceFromAgent(agent),
                        <time> -> simulationTime(),
                        <delta_time> -> deltaTime()
                        end,
                mk_AST`PatchDirective(directive, identifier) ->
                    cases directive:
                        <direction_of_gradient> -> directionOfGradient(identifier)
                        end,
                mk_AST`GuardedChoices(guardsAndExpressions, defaultExpression) ->
                    cases guardsAndExpressions:
                        [] -> evalExpression(defaultExpression),
                        [mk_(guard, expr)]^rest ->
                            if
                                evalCondition(guard)
                            then
                                evalExpression(guard)
                            else
                                evalExpression(mk_AST`GuardedChoices(rest, defaultExpression))
                        end,
                others -> undefined
                end;
    
    evalCondition : AST`Condition ==> bool
    evalCondition(cond) ==
        return cases cond:
                mk_AST`Equality(exprs) ->
                    card {evalExpression(expr) | expr in seq exprs} = 1,
                mk_AST`GreaterOrEqual(exprs) ->
                    forall i in set {1, ..., len exprs - 1} &
                        evalExpression(exprs(i)) >= evalExpression(exprs(i + 1)),
                mk_AST`GreaterThan(exprs) ->
                    forall i in set {1, ..., len exprs - 1} &
                        evalExpression(exprs(i)) > evalExpression(exprs(i + 1)),
                mk_AST`LessOrEqual(exprs) ->
                    forall i in set {1, ..., len exprs - 1} &
                        evalExpression(exprs(i)) <= evalExpression(exprs(i + 1)),
                mk_AST`LessThan(exprs) ->
                    forall i in set {1, ..., len exprs - 1} &
                        evalExpression(exprs(i)) < evalExpression(exprs(i + 1)),
                mk_AST`NotEqual(expr1, expr2) ->
                    evalExpression(expr1) <> evalExpression(expr2),
                mk_AST`Negation(cond) -> not evalCondition(cond),
                mk_AST`Conjunction(conds) ->
                    forall cond in seq conds & evalCondition(cond),
                mk_AST`Disjunction(conds) ->
                    exists cond in seq conds & evalCondition(cond)
                end;

operations
    readVariable : [AST`Identifier] * AST`Identifier ==> real
    readVariable(agent, identifier) ==
        return Memory`read(Interpreter`getAttributeAddress(agent, identifier));
    
    writeVariable : [AST`Identifier] * AST`Identifier * real ==> ()
    writeVariable(agent, identifier, data) ==
        Memory`write(Interpreter`getAttributeAddress(agent, identifier), data);
    
    writeDeltaVariable : [AST`Identifier] * AST`Identifier * real ==> ()
    writeDeltaVariable(agent, identifier, data) ==
        Memory`writeDelta(Interpreter`getAttributeAddress(agent, identifier), data);
    
    uniform : real * real ==> real
    uniform(sectionFrom, sectionTo) ==
        return let x = Interpreter`nextRandom()
            in x  * (sectionTo - sectionFrom) + sectionFrom;
    
    normal : real * real ==> real
    normal(mean, sigma) ==
        return let x1 = Interpreter`nextRandom(), x2 = Interpreter`nextRandom()
            in
                sqrt(ln(x1)  * -2.0)  * cos(x2  * 3.141592653589793  * 2.0)  * sigma
                + mean
    pre  sigma > 0;
    
    logLogistic : real * real ==> real
    logLogistic(scale, shape) ==
        let p : real = Interpreter`nextRandom()
        in return scale  * (p / (1 - p)) ** (1 / shape)
    pre  scale > 0 and shape > 0;
    
    gamma : real * real ==> real
    gamma(shape, scale) ==
        (if
            shape <= 1.0
        then
				-- Ahrens-Diester algorithm
            (let e = 2.718281828459045, c1 = e / (shape + e)
            in
                while true
                do
                    (dcl u1:real, u2:real;
                    u1 := Interpreter`nextRandom();
                    u2 := Interpreter`nextRandom();
                    if
                        u1 <= c1
                    then
                        (let x = (u1 / c1) ** (1 / shape)
                        in if u2 <= exp(-x) then return x  * scale)
                    else
                        (let x = -ln((1 - u1) / (c1  * shape))
                        in if u2 <= x ** (shape - 1.0) then return x  * scale)))
        else
				-- Marsaglia-Tsang algorithm
            (let c1 = shape - 1 / 3, c2 = 1 / sqrt(9  * c1)
            in
                while true
                do
                    (dcl z:real := normal(0, 1), v:real, u:real;
                    while c2  * z <= -1.0 do z := normal(0, 1);
                    v := let t = c2  * z + 1.0 in t  * t  * t;
                    u := Interpreter`nextRandom();
                    if u < 1.0 - 0.0331  * z  * z  * z  * z then return c1  * v  * scale;
                    if
                        ln(u) < 0.5  * z  * z + c1  * (1.0 - v + ln(v))
                    then
                        return c1  * v  * scale)))
    pre  scale > 0 and shape > 0;
    
    directionOfGradient : AST`Identifier ==> real
    directionOfGradient(attribute) ==
        return let
                here = readVariable("here", attribute),
                east = readVariable("east", attribute),
                west = readVariable("west", attribute),
                south = readVariable("south", attribute),
                north = readVariable("north", attribute)
            in
                (if
                        ((here >= east and here >= west) and here >= south) and here >= north
                    then
                        let
                            x = readVariable(nil, Interpreter`X_ATTRIBUTE_NAME),
                            y = readVariable(nil, Interpreter`Y_ATTRIBUTE_NAME)
                        in
                            theta(
                                Interpreter`patchLength()  * (floor Interpreter`normalizeX(x) + 0.5)
                                - x,
                                Interpreter`patchLength()  * (floor Interpreter`normalizeY(y) + 0.5)
                                - y)
                    else
                        theta(east - west, north - south));
    
    directionOfAgent : AST`Identifier ==> real
    directionOfAgent(agent) ==
        return theta(
                readVariable(agent, Interpreter`X_ATTRIBUTE_NAME)
                - readVariable(nil, Interpreter`X_ATTRIBUTE_NAME),
                readVariable(agent, Interpreter`Y_ATTRIBUTE_NAME)
                - readVariable(nil, Interpreter`Y_ATTRIBUTE_NAME));
    
    distanceFromAgent : AST`Identifier ==> real
    distanceFromAgent(agent) ==
        return let
                x =
                    readVariable(agent, Interpreter`X_ATTRIBUTE_NAME)
                    - readVariable(nil, Interpreter`X_ATTRIBUTE_NAME),
                y =
                    readVariable(agent, Interpreter`Y_ATTRIBUTE_NAME)
                    - readVariable(nil, Interpreter`Y_ATTRIBUTE_NAME)
            in sqrt(x ** 2 + y ** 2);
    
    pure simulationTime : () ==> real
    simulationTime() == return Interpreter`simulationTime();
    
    pure deltaTime : () ==> real
    deltaTime() == return Interpreter`deltaTime();
    
    pure apply : seq1 of char * seq1 of real ==> real
    apply(func, args) ==
        cases func:
            "abs" ->
                if len args = 1 then return abs (hd args) else exit NUM_ARGS_ERROR,
            "cos" ->
                if len args = 1 then return cos(hd args) else exit NUM_ARGS_ERROR,
            "exp" ->
                if len args = 1 then return exp(hd args) else exit NUM_ARGS_ERROR,
            "ln" ->
                if len args = 1 then return ln(hd args) else exit NUM_ARGS_ERROR,
            "max" -> return max(args),
            "min" -> return min(args),
            "mean" -> return sum(args) / len args,
            "positive" ->
                if
                    len args = 1
                then
                    return let x = hd args in (if x >= 0 then x else 0)
                else
                    exit NUM_ARGS_ERROR,
            "power" ->
                if len args = 2 then return (args(1)) ** (args(2)) else exit NUM_ARGS_ERROR,
            "sin" ->
                if len args = 1 then return sin(hd args) else exit NUM_ARGS_ERROR,
            "sqrt" ->
                if len args = 1 then return sqrt(hd args) else exit NUM_ARGS_ERROR,
            "sum" -> return sum(args)
            end;

functions
    max : seq1 of real -> real
    max(xs) ==
        cases xs:
            [x] -> x,
            [x]^rest -> let m = max(rest) in (if x >= m then x else m)
            end;
    
    min : seq1 of real -> real
    min(xs) ==
        cases xs:
            [x] -> x,
            [x]^rest -> let m = min(rest) in (if x <= m then x else m)
            end;
    
    sum : seq1 of real -> real
    sum(xs) ==
        cases xs:
            [x] -> x,
            [x]^rest -> x + sum(rest)
            end;
    
    pow : real * int -> real
    pow(x, y) == if y >= 0 then x ** y else 1 / x ** (abs y);
    
    theta : real * real -> real
    theta(x, y) ==
        if
            x = 0
        then
            if y >= 0 then 1.570796326794897 else 4.71238898038469
        else
            (let th = atan(y / x)
                in
                    (if
                            x >= 0
                        then
                            if y >= 0 then th else 6.283185307179586 + th
                        else
                            3.141592653589793 + th));

end Evaluation
