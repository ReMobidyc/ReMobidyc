module Interpreter
imports
    from AST all,
    from Unit all,
    from Memory all,
    from Random all,
    from MATH
        functions
            sqrt renamed sqrt;
            sin renamed sin;
            cos renamed cos;
            exp renamed exp;
            ln renamed ln;
            atan renamed atan;
exports all
definitions
types
     SimulationModel ::
        simulationDefinition : AST`SimulationDefinition
        animatDefinitions : map AST`Identifier to AST`AnimatDefinition
        worldDefinition : AST`WorldDefinition
        patchDefinition : AST`PatchDefinition
        actionDefinitions : map AST`Identifier to AST`ActionDefinition
        taskDefinitions : map AST`Identifier to AST`TaskDefinition;
     Context = ActionContext;
     ActionContext ::
        attributes : map [AST`Identifier] to (map AST`Identifier to Memory`Address)
        utilities : map AST`Identifier to real
        utilityDefinitions : map AST`Identifier to AST`Expression
        action : AST`ActionDefinition
        random : Random`RandomGenerator;

values
     AGENT_NEW = "new";
     UNRESOLVED_REFERENCE = <UNRESOLVED_REFERENCE>;
     NUM_ARGS_ERROR = <NUM_ARGS_ERROR>;

operations
    eval : AST`Expression ==> real
    eval(expr) ==
        return cases expr:
                mk_AST`UtilityVariable(identifier) -> readUtility(identifier),
                mk_AST`AttributeVariable(agent, identifier) ->
                    readVariable(agent, identifier),
                mk_AST`Literal(val, unit) -> Unit`toSI(unit, val),
                mk_AST`Addition(expr1, expr2) -> eval(expr1) + eval(expr2),
                mk_AST`Subtraction(expr1, expr2) -> eval(expr1) - eval(expr2),
                mk_AST`Product(expr1, expr2) -> eval(expr1)  * eval(expr2),
                mk_AST`Fraction(expr1, expr2) -> eval(expr1) / eval(expr2),
                mk_AST`Power(expr, order) -> pow(eval(expr), order),
                mk_AST`Minus(expr) -> -eval(expr),
                mk_AST`DeUnitCasting(unit, expr) -> Unit`fromSI(unit, eval(expr)),
                mk_AST`EnUnitCasting(expr, unit) -> Unit`toSI(unit, eval(expr)),
                mk_AST`UniformDistribution(expr1, expr2) ->
                    uniform(eval(expr1), eval(expr2)),
                mk_AST`NormalDistribution(mean, sigma) ->
                    normal(eval(mean), eval(sigma)),
                mk_AST`GammaDistribution(shape, scale) ->
                    gamma(eval(shape), eval(scale)),
                mk_AST`LogLogisticDistribution(scale, shape) ->
                    logLogistic(eval(scale), eval(shape)),
                mk_AST`Apply(func, args) -> apply(func, [eval(x) | x in seq args]),
                mk_AST`AgentDirective(directive, agent) ->
                    cases directive:
                        <direction> -> directionOfAgent(agent),
                        <distance> -> distanceFromAgent(agent),
                        <time> -> simulationTime(),
                        <delta_time> -> deltaTime()
                        end,
                mk_AST`PatchDirective(directive, identifier) ->
                    cases directive:
                        <direction_of_gradient> -> directionOfGradient(identifier)
                        end,
                mk_AST`GuardedChoices(guardsAndExpressions, defaultExpression) ->
                    cases guardsAndExpressions:
                        [] -> eval(defaultExpression),
                        [mk_(guard, expr)]^rest ->
                            if
                                evalCond(guard)
                            then
                                eval(guard)
                            else
                                eval(mk_AST`GuardedChoices(rest, defaultExpression))
                        end,
                others -> undefined
                end;
    
    evalCond : AST`Condition ==> bool
    evalCond(cond) ==
        return cases cond:
                mk_AST`Equality(expr1, expr2) -> eval(expr1) = eval(expr2),
                mk_AST`GreaterOrEqual(expr1, expr2) -> eval(expr1) >= eval(expr2),
                mk_AST`GreaterThan(expr1, expr2) -> eval(expr1) > eval(expr2),
                mk_AST`LessOrEqual(expr1, expr2) -> eval(expr1) <= eval(expr2),
                mk_AST`LessThan(expr1, expr2) -> eval(expr1) < eval(expr2),
                mk_AST`NotEqual(expr1, expr2) -> eval(expr1) <> eval(expr2),
                mk_AST`Negation(cond) -> not evalCond(cond),
                mk_AST`Conjunction(cond1, cond2) ->
                    evalCond(cond1) and evalCond(cond2),
                mk_AST`Disjunction(cond1, cond2) ->
                    evalCond(cond1) or evalCond(cond2)
                end;

state Interpreter of
    simulationModel : [SimulationModel]
    context : [Context]
    randomSeed : nat1
init s == s = mk_Interpreter(nil, nil, 1)
end

operations
    setupActionContext : AST`AgentDefinition * AST`ActionDefinition * Memory`Address *
    [Memory`Address] ==> ()
    setupActionContext(subjectDefinition, actionDefinition, subject, object) ==
        is not yet specified;
    
    pure actionContextSV : AST`ActionDefinition * AST`AgentDefinition * Memory`Address *
    nat1 ==> ActionContext
    actionContextSV(actionDefinition, subjectDefinition, subject, random) ==
        return mk_ActionContext(
                {nil |-> attributeOffsets(subjectDefinition, subject)},
                {|->},
                {attrDef.identifier |-> attrDef.expression
                | attrDef in seq actionDefinition.utilityDefinitions},
                actionDefinition,
                mk_Random`RandomGenerator(random));
    
    pure attributeOffsets : AST`AgentDefinition * Memory`Address ==> map AST`Identifier to Memory`Address
    attributeOffsets(agentDefinition, animat) ==
        return let
                attributes : seq of AST`Identifier =
                    (if is_AST`AnimatDefinition(agentDefinition) then ["x", "y"] else [])
                    ^ [decl.identifier
                        | decl in seq agentDefinition.attributeDeclarations]
            in
                {attributes(offset) |-> animat + offset - 1
                | offset in set inds attributes};
    
    setContext : Context ==> ()
    setContext(c) == context := c;
    
    readUtility : AST`Identifier ==> real
    readUtility(identifier) ==
        if
            identifier in set dom context.utilities
        then
            return context.utilities(identifier)
        else
            let val = eval(context.utilityDefinitions(identifier))
            in
                (context .utilities(identifier) := val;
                return val);
    
    readVariable : [AST`Identifier] * AST`Identifier ==> real
    readVariable(agent, identifier) ==
        return Memory`read(getAddress(agent, identifier));
    
    writeVariable : [AST`Identifier] * AST`Identifier * real ==> ()
    writeVariable(agent, identifier, data) ==
        Memory`write(getAddress(agent, identifier), data);
    
    writeDeltaVariable : [AST`Identifier] * AST`Identifier * real ==> ()
    writeDeltaVariable(agent, identifier, data) ==
        Memory`writeDelta(getAddress(agent, identifier), data);
    
    getAddress : [AST`Identifier] * AST`Identifier ==> Memory`Address
    getAddress(agent, identifier) ==
        if
            agent in set dom context.attributes
        then
            let attr = context.attributes(agent)
            in
                (if
                    identifier in set dom attr
                then
                    return attr(identifier)
                else
                    exit UNRESOLVED_REFERENCE)
        else
            exit UNRESOLVED_REFERENCE;
    
    random : () ==> real
    random() ==
        (context .random := Random`next(context.random);
        return Random`value(context.random))
    post  RESULT >= 0 and RESULT <= 1;
    
    uniform : real * real ==> real
    uniform(sectionFrom, sectionTo) ==
        return let x = random() in x  * (sectionTo - sectionFrom) + sectionFrom;
    
    normal : real * real ==> real
    normal(mean, sigma) ==
        return let x1 = random(), x2 = random()
            in
                sqrt(ln(x1)  * -2.0)  * cos(x2  * 3.141592653589793  * 2.0)  * sigma
                + mean
    pre  sigma > 0;
    
    logLogistic : real * real ==> real
    logLogistic(scale, shape) ==
        let p : real = random()
        in return scale  * (p / (1 - p)) ** (1 / shape)
    pre  scale > 0 and shape > 0;
    
    gamma : real * real ==> real
    gamma(shape, scale) ==
        (if
            shape <= 1.0
        then
				-- Ahrens-Diester algorithm
            (let e = 2.718281828459045, c1 = e / (shape + e)
            in
                while true
                do
                    (dcl u1:real, u2:real;
                    u1 := random();
                    u2 := random();
                    if
                        u1 <= c1
                    then
                        (let x = (u1 / c1) ** (1 / shape)
                        in if u2 <= exp(-x) then return x  * scale)
                    else
                        (let x = -ln((1 - u1) / (c1  * shape))
                        in if u2 <= x ** (shape - 1.0) then return x  * scale)))
        else
				-- Marsaglia-Tsang algorithm
            (let c1 = shape - 1 / 3, c2 = 1 / sqrt(9  * c1)
            in
                while true
                do
                    (dcl z:real := normal(0, 1), v:real, u:real;
                    while c2  * z <= -1.0 do z := normal(0, 1);
                    v := let t = c2  * z + 1.0 in t  * t  * t;
                    u := random();
                    if u < 1.0 - 0.0331  * z  * z  * z  * z then return c1  * v  * scale;
                    if
                        ln(u) < 0.5  * z  * z + c1  * (1.0 - v + ln(v))
                    then
                        return c1  * v  * scale)))
    pre  scale > 0 and shape > 0;
    
    directionOfGradient : AST`Identifier ==> real
    directionOfGradient(attribute) ==
        return let
                here = readVariable("here", attribute),
                east = readVariable("east", attribute),
                west = readVariable("west", attribute),
                south = readVariable("south", attribute),
                north = readVariable("north", attribute)
            in
                (if
                        ((here >= east and here >= west) and here >= south) and here >= north
                    then
                        let x = readVariable(nil, "x"), y = readVariable(nil, "y")
                        in
                            theta(
                                patchLength()  * (floor patchX(x) + 0.5) - x,
                                patchLength()  * (floor patchY(y) + 0.5) - y)
                    else
                        theta(east - west, north - south));
    
    directionOfAgent : AST`Identifier ==> real
    directionOfAgent(agent) ==
        return theta(
                readVariable(agent, "x") - readVariable(nil, "x"),
                readVariable(agent, "y") - readVariable(nil, "y"));
    
    distanceFromAgent : AST`Identifier ==> real
    distanceFromAgent(agent) ==
        return let
                x = readVariable(agent, "x") - readVariable(nil, "x"),
                y = readVariable(agent, "y") - readVariable(nil, "y")
            in sqrt(x ** 2 + y ** 2);
    
    simulationTime : () ==> real
    simulationTime() == return Memory`getTime()  * deltaTime();
    
    deltaTime : () ==> real
    deltaTime() ==
        return eval(simulationModel.simulationDefinition.timeDefinition.timeStep);
    
    patchLength : () ==> real
    patchLength() ==
        return eval(simulationModel.simulationDefinition.patchInitializer.size);
    
    worldWest : () ==> real
    worldWest() == return 0;
    
    worldEast : () ==> real
    worldEast() ==
        return simulationModel.simulationDefinition.patchInitializer.xDivisions
             * patchLength();
    
    worldSouth : () ==> real
    worldSouth() == return 0;
    
    worldNorth : () ==> real
    worldNorth() ==
        return simulationModel.simulationDefinition.patchInitializer.yDivisions
             * patchLength();
    
    patchX : real ==> real
    patchX(x) == return (x - worldWest()) / patchLength();
    
    patchY : real ==> real
    patchY(y) == return (y - worldSouth()) / patchLength();
    
    pure apply : seq1 of char * seq1 of real ==> real
    apply(func, args) ==
        cases func:
            "abs" ->
                if len args = 1 then return abs (hd args) else exit NUM_ARGS_ERROR,
            "cos" ->
                if len args = 1 then return cos(hd args) else exit NUM_ARGS_ERROR,
            "exp" ->
                if len args = 1 then return exp(hd args) else exit NUM_ARGS_ERROR,
            "ln" ->
                if len args = 1 then return ln(hd args) else exit NUM_ARGS_ERROR,
            "max" -> return max(args),
            "min" -> return min(args),
            "mean" -> return sum(args) / len args,
            "positive" ->
                if
                    len args = 1
                then
                    return let x = hd args in (if x >= 0 then x else 0)
                else
                    exit NUM_ARGS_ERROR,
            "power" ->
                if len args = 2 then return (args(1)) ** (args(2)) else exit NUM_ARGS_ERROR,
            "sin" ->
                if len args = 1 then return sin(hd args) else exit NUM_ARGS_ERROR,
            "sqrt" ->
                if len args = 1 then return sqrt(hd args) else exit NUM_ARGS_ERROR,
            "sum" -> return sum(args)
            end;

functions
    max : seq1 of real -> real
    max(xs) ==
        cases xs:
            [x] -> x,
            [x]^rest -> let m = max(rest) in (if x >= m then x else m)
            end;
    
    min : seq1 of real -> real
    min(xs) ==
        cases xs:
            [x] -> x,
            [x]^rest -> let m = min(rest) in (if x <= m then x else m)
            end;
    
    sum : seq1 of real -> real
    sum(xs) ==
        cases xs:
            [x] -> x,
            [x]^rest -> x + sum(rest)
            end;
    
    pow : real * int -> real
    pow(x, y) == if y >= 0 then x ** y else 1 / x ** (abs y);
    
    theta : real * real -> real
    theta(x, y) ==
        if
            x = 0
        then
            if y >= 0 then 1.570796326794897 else 4.71238898038469
        else
            (let th = atan(y / x)
                in
                    (if
                            x >= 0
                        then
                            if y >= 0 then th else 6.283185307179586 + th
                        else
                            3.141592653589793 + th));

end Interpreter
